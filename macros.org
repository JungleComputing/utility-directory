#+name: license-preamble
#+begin_src lisp :exports none
;;;; Copyright 2018 Pieter Hijma

;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at

;;;;     http://www.apache.org/licenses/LICENSE-2.0

;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.
#+end_src

#+property: header-args :comments link :tangle-mode (identity #o400) :results output silent :mkdirp yes

* Macros
  :PROPERTIES:
  :header-args+: :package ":utility-directory"
  :header-args+: :tangle "system/macros.lisp"
  :END:

#+begin_src lisp :exports none :noweb yes
<<license-preamble>>

(in-package :utility-directory)
#+end_src


** ~def-methods~

Creates multiple methods with the same body given a specification of the
parameters.  

#+begin_src lisp
(eval-when (:compile-toplevel :load-toplevel :execute)
(defun create-specializer (spec)
  (destructuring-bind (var-name types) spec
    (loop for type in types
       collect (list var-name type))))

(defun create-param-lists (specs)
  (loop for spec in specs
     collect (etypecase spec
	       (symbol (list spec))
	       (list (create-specializer spec))))))

(defmacro def-methods (name specs &body body)
  "Def-methods defines multiple methods, each with name name and the same
body.  The number of methods depends on specs, which should be a list of specs.
A spec is a list of name and a list of types or just a symbol if it is a regular
parameter to the method.

An example is: (def-methods multi ((a (string integer))
                                   (b (string integer))
                                    c)
                  (dosomething a b c))"
  (let ((params (cartesian-product (create-param-lists specs))))
    `(progn
       ,@(loop for p in params collect
	      `(defmethod ,name ,p ,@body)))))
#+end_src

** ~with-gensyms~ <<with-gensyms>>

Convenience macro to generate unique symbols within a macro, also see
[[once-only]].

** ~once-only~ <<once-only>>

Convenience function to ensure that a variable in a macro is evaluated only
once.  Also see [[with-gensyms]].

** ~def-standard-class~

Creates a standard class with initarg keywords and readers for the slots.

#+begin_src lisp
(defmacro def-standard-class (name superclasses slots)
  "Creates a class with superclasses and slots with for every slot:
- a keyword for the slot to initialize
- an initform that throws an error if you don't supply a value for the slot
- a reader with the same name."
  `(defclass ,name ,superclasses
     ,(loop for s in slots collect
           `(,s :initarg ,(intern (string s) :keyword)
                :initform (error "Must supply ~a" ',s)
                :reader ,s))))
#+end_src

** ~fixed-point~

Computes a fixed-point of a data-structure given a copy and compare function.

#+begin_src lisp
(defmacro fixed-point (var copy-function compare-function &body body)
  "Compute a fixed point of var, comparing the var with compare-function and
copying it with copy-function."
  (with-gensyms (old)
    `(loop with ,old
        do (setf ,old (funcall ,copy-function ,var))
          ,@body
        until (funcall ,compare-function ,old ,var)
          finally (return ,var))))
#+end_src

** ~unexport-symbols~

Unexport symbols that are not defined to be exported in a package.  A typical
usage is to call this in front of a ~defpackage~ to make sure that the compiler
does not complain about symbols that are visible but are not defined to be
exported in the package declaration.

#+begin_src lisp
(defmacro unexport-symbols (package)
  "Unexport symbols that are defined dynamically, i.e. not in a 'defpackage' 
definition."
  (with-gensyms (s)
    `(eval-when (:compile-toplevel)
       (when (find-package ,package)
	 (do-external-symbols (,s ,package)
	   (unexport ,s ,package))))))
#+end_src
