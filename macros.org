#+property: header-args :comments link :tangle-mode (identity #o400) :results output silent :mkdirp yes

* Macros
  :PROPERTIES:
  :header-args+: :package ":utility-directory"
  :header-args+: :tangle "system/macros.lisp"
  :END:

#+begin_src lisp :exports none
(in-package :utility-directory)
#+end_src


** ~def-methods~

Creates multiple methods with the same body given a specification of the
paramters.  

#+begin_src lisp
(eval-when (:compile-toplevel :load-toplevel :execute)
(defun create-specializer (spec)
  (destructuring-bind (var-name types) spec
    (loop for type in types
       collect (list var-name type))))

(defun create-param-lists (specs)
  (loop for spec in specs
     collect (etypecase spec
	       (symbol (list spec))
	       (list (create-specializer spec))))))

(defmacro def-methods (name specs &body body)
  "Def-methods defines multiple methods, each with name name and the same
body.  The number of methods depends on specs, which should be a list of specs.
A spec is a list of name and a list of types or just a symbol if it is a regular
parameter to the method.

An example is: (def-methods multi ((a (string integer))
                                   (b (string integer))
                                    c)
                  (dosomething a b c))"
  (let ((params (cartesian-product (create-param-lists specs))))
    `(progn
       ,@(loop for p in params collect
	      `(defmethod ,name ,p ,@body)))))
#+end_src


# ** Generating unique symbols

# The macros ~with-gensyms~ and ~once-only~ are convenient macros to generate
# multiple unique symbols and to ensure that variables are only evaluated ones.
# The are available in ~alexandria~.

# ** Anaphoric conditionals

# The following anaphoric if binds the result of the condition to the variable
# ~it~.  The ~aif~ is removed because it can be found in ~let-over-lambda~, and
# ~anaphora~.  The macro ~awhen~ can be found only in ~anaphora~.

# ** Convenience macro for classes

# The following macro defines a standard class with reader functions.

# #+begin_src lisp
# (in-package :util)

# (defmacro def-standard-class (name superclasses slots)
#   `(defclass ,name ,superclasses
#      ,(loop for s in slots collect
# 	   `(,s :initarg ,(intern (string s) :keyword)
# 		:initform (error "Must supply ~a" ',s)
# 		:reader ,s))))
# #+end_src

# The following macro defines multiple methods given a specification:


# ** Unexport symbols

# #+begin_src lisp
# (defmacro unexport-symbols (package)
#   "Unexport symbols that are defined dynamically, i.e. not in a 'defpackage' 
# definition."
#   (with-gensyms (s)
#     `(eval-when (:compile-toplevel)
#        (when (find-package ,package)
# 	 (do-external-symbols (,s ,package)
# 	   (unexport ,s ,package))))))
# #+end_src

# ** Temporarily shadowing functions

# The following function temporarily shadows functions:

# #+begin_src lisp
# (eval-when (:compile-toplevel :load-toplevel)
#   (defun create-symbol (symbol suffix)
#     (intern (format nil "~a-~a" symbol suffix)))

#   (defun orig-symbol (old-func)
#     (create-symbol old-func "ORIG"))

#   (defun bound-symbol (old-func)
#     (create-symbol old-func "BOUND")))

# (defmacro with-shadow (old-func/new-func-pairs &body body)
#   "Shadow a list of old function/new function pairs.  Any call to old-func
# within body will use new-func, instead of the default function for old-func.
# This macro is intentionally unhygienic: old-func-orig is the anaphor, and can
# be used in body to access the shadowed function"
#   `(let (,@(loop for (old new) in old-func/new-func-pairs collect
#                 (orig-symbol old)))
#      (let (,@(loop for (old new) in old-func/new-func-pairs collect
#                   `(,(bound-symbol old) (fboundp ',old))))
#        ,@(loop for (old new) in old-func/new-func-pairs collect
#               `(progn
#                  (when ,(bound-symbol old)
#                    (setf ,(orig-symbol old) (symbol-function ',old)))
#                  (setf (symbol-function ',old) ,new)))
#        (unwind-protect (progn ,@body)
#          ,@ (loop for (old new) in old-func/new-func-pairs collect
#                  `(if ,(bound-symbol old)
#                       (setf (symbol-function ',old) ,(orig-symbol old))
#                       (fmakunbound ',old)))))))
# #+end_src

# ** Create a dynamically documented function

# #+begin_src lisp
# (defmacro defun-documented (name parameters doc-func &body body)
#   `(progn
#      (defun ,name ,parameters ,@body)
#      (setf (documentation ',name 'function) (funcall ,doc-func))))
# #+end_src

** ~fixed-point~

Computes a fixed-point of a data-structure given a copy and compare function.

#+begin_src lisp
(defmacro fixed-point (var copy-function compare-function &body body)
  "Compute a fixed point of var, comparing the var with compare-function and
copying it with copy-function."
  (with-gensyms (old)
    `(loop with ,old
        do (setf ,old (funcall ,copy-function ,var))
          ,@body
        until (funcall ,compare-function ,old ,var)
          finally (return ,var))))
#+end_src

** ~unexport-symbols~

Unexport symbols that are not defined to be exported in a package.  A typical
usage is to call this in front of a ~defpackage~ to make sure that the compiler
does not complain about symbols that are visible but are not defined to be
exported in the package declaration.

#+begin_src lisp
(defmacro unexport-symbols (package)
  "Unexport symbols that are defined dynamically, i.e. not in a 'defpackage' 
definition."
  (with-gensyms (s)
    `(eval-when (:compile-toplevel)
       (when (find-package ,package)
	 (do-external-symbols (,s ,package)
	   (unexport ,s ,package))))))
#+end_src
