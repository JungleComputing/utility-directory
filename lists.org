#+property: header-args :comments link :tangle-mode (identity #o400) :results output silent :mkdirp yes

* Lists
  :PROPERTIES:
  :header-args+: :package ":utility-directory"
  :header-args+: :tangle "system/lists.lisp"
  :END:

#+begin_src lisp :exports none
(in-package :utility-directory)
#+end_src

This directory has the following utility functions for lists:

** ~cartesian-product~

Takes the cartesian product of a list of lists.  It is also available in
Quickutil, but this version only supports two lists, whereas the version below
supports more than two.

#+begin_src lisp
(defun simple-cartesian-product (set list)
  (loop for elm in set
     nconc (loop for set in list
	      collect (cons elm set))))

(defun cartesian-product (list-of-sets)
  (reduce #'simple-cartesian-product list-of-sets
	  :from-end t
	  :initial-value '(())))
#+end_src

** ~compose~

This is slightly out of place, but function composition is a list of functions.
The function ~compose~ is available in ~alexandria~.

** ~ensure-list~ <<util:ensure-list>>

This utility is sometimes also called ~mklist~ and ensures that the result is
always a list.  It is available in ~alexandria~.

** ~filter~

Returns a new list of the elements in the original for which the predicate
holds.  This can be done with ~(remove-if (complement <predicate>)
<sequence>)~.  This can also be expressed with ~(remove-if-not <predicate>
<sequence>)~, but this function is deprecated.  These forms are so verbose,
that we just added filter:

#+begin_src lisp
(defun filter (predicate sequence)
  (remove-if (complement predicate) sequence))
#+end_src


** ~flatten~

This utility flattens a tree.  It can be found in ~let-over-lambda~ and
~alexandria~. 


** ~insert-after~

Return a new list where an item is inserted behind a specified item in a list.

#+begin_src lisp
(defun insert-after (item-to-insert-after list item-to-insert 
		      &key (test #'eq))
  "Insert item-to-insert after item-to-insert-after in list list."
  (reduce #'(lambda (item result)
	      (if (funcall test item item-to-insert-after)
		  (cons item (cons item-to-insert result))
		  (cons item result))) list :from-end t :initial-value nil))


#+end_src


** ~insert-before~

 #+begin_src lisp
(defun insert-before (item-to-insert-before list item-to-insert 
		      &key (test #'eq))
  "Insert item-to-insert before item-to-insert-before in list list."
  (reduce #'(lambda (item result)
	      (if (funcall test item item-to-insert-before)
		  (cons item-to-insert (cons item result))
		  (cons item result))) list :from-end t :initial-value nil))
#+end_src



** ~list-of~

Returns true if all elements of the list satisfy the predicate.

#+begin_src lisp
(defun list-of (predicate list)
  "Check whether the elements of lst sattisfy predicate."
  (loop for i in list always (funcall predicate i)))
#+end_src

** ~list-of-type~

Returns true if all elements of the list have the given type.

#+begin_src lisp
(defun list-of-type (list type)
  "Check whether the elements of list are of type type."
  (list-of #'(lambda (x) (typep x type)) list))
#+end_src

** ~map-tuple~

The function ~map-tuple~ can be mimicked with:

#+begin_src lisp :tangle no 
(loop for (a b) on <list> while b collect #'(lambda (a b) ...))
#+end_src


** ~mklist~

See [[util:ensure-list][~ensure-list~]]


** ~splice-if~

This function splices a list into another list as soon as the test holds on an
item in the list.  This function resembles ~subst-if~ a bit, but does not
operate on trees, but just on a single list.

#+begin_src lisp
(defun splice-if (new test list)
  "Splice new into list list if test test holds.  If new is not a list but an
item, the item is inserted into the list."
  (reduce #'(lambda (x y)
	      (if (funcall test x)
		  (if (listp new) (append new y) (cons new y))
		  (cons x y)))
	  list :from-end t :initial-value nil))
#+end_src


** ~split-list-on-first~

Splits a list on the first item that satisfies the given predicate.

#+begin_src lisp
(defun split-list-on-first (predicate list)
  "Split the list on the first item that satisfies the predicate."
  (loop for (head . tail) on list
     when (funcall predicate head) return (values first-part (cons head tail))
     collect head into first-part))
#+end_src



** ~walk-tree~

Apply a function to all atoms and conses of a tree.

#+begin_src lisp
(defun walk-tree (tree function)
  "Walk a tree and apply function to all atoms and conses."
  (subst-if t (constantly nil) tree :key function))
 #+end_src

